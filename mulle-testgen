#! /usr/bin/env mulle-bash
#
#   Copyright (c) 2019 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#
[ "${TRACE}" = 'YES' -o "${MULLE_TESTGEN_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.20.4"

#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#
if [ -z "${MULLE_TESTGEN_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-testgen" "mulle-testgen-plugin.sh"
   MULLE_TESTGEN_LIBEXEC_DIR="${RVAL}"
fi


testgen::print_flags()
{

   options_technical_flags_usage " : "
   echo "   -f    : force overwrite"
}


testgen::usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
usage:
   ${MULLE_EXECUTABLE_NAME} [flags] <command>

   Generate Objective-C test files. See \`generate -h\` for more help.

Flags:
EOF
   testgen::print_flags | LC_ALL=C sort >&2

   cat <<EOF >&2

Commands:
   generate : generate test files
   plugin   : show available plugins

EOF
   exit 1
}


testgen::main()
{
   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            testgen::usage
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --plugin-path)
            shift

            r_colon_concat "${MULLE_TESTGEN_PLUGIN_PATH}" "$1"
            MULLE_TESTGEN_PLUGIN_PATH="${RVAL}"
         ;;

         -*)
            testgen::usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   #
   # stuff that gets loaded later, possibly overrides previous definitions
   #
   r_colon_concat "${MULLE_TESTGEN_LIBEXEC_DIR}/plugins" "${MULLE_TESTGEN_PLUGIN_PATH}"
   MULLE_TESTGEN_PLUGIN_PATH="${RVAL}"

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      ""|help)
         testgen::usage
      ;;

      class)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_class_main "$@"
      ;;

      libexec-dir)
         printf "%s\n" "${MULLE_TESTGEN_LIBEXEC_DIR}"
      ;;

      generate)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_generate_main "$@"
      ;;

      method)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_method_main "$@"
      ;;

      plugin)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-plugin.sh"

         testgen_plugin_main "$@"
      ;;

      property)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_property_main "$@"
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         fail "Unknown command \"${cmd}\""
      ;;
   esac
}


call_with_flags "testgen::main" "${MULLE_TESTGEN_FLAGS}" "$@"
