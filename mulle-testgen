#! /usr/bin/env bash
#
#   Copyright (c) 2019 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#
[ "${TRACE}" = 'YES'  ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.18.0"


print_flags()
{

   options_technical_flags_usage " : "
   echo "   -f    : force overwrite"
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [flags] <command>

   Generate Objective-C test files. See `generate -h` for more help.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   cat <<EOF >&2

Commands:
   generate : generate test files
   plugin   : show available plugins

EOF
   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --plugin-path)
            shift

            r_colon_concat "${MULLE_TESTGEN_PLUGIN_PATH}" "$1"
            MULLE_TESTGEN_PLUGIN_PATH="${RVAL}"
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   #
   # stuff that gets loaded later, possibly overrides previous definitions
   #
   r_colon_concat "${MULLE_TESTGEN_LIBEXEC_DIR}/plugins" "${MULLE_TESTGEN_PLUGIN_PATH}"
   MULLE_TESTGEN_PLUGIN_PATH="${RVAL}"

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      ""|help)
         usage
      ;;

      class)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_class_main "$@"
      ;;

      generate)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_generate_main "$@"
      ;;

      method)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_method_main "$@"
      ;;

      plugin)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-plugin.sh"

         testgen_plugin_main "$@"
      ;;

      property)
         # shellcheck source=src/mulle-testgen-generate.sh
         . "${MULLE_TESTGEN_LIBEXEC_DIR}/mulle-testgen-generate.sh"

         testgen_property_main "$@"
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         fail "Unknown command \"${cmd}\""
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
             echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

   # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   r_get_libexec_dir "$0" "mulle-testgen" "mulle-testgen-plugin.sh"
   MULLE_TESTGEN_LIBEXEC_DIR="${RVAL}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_TESTGEN_LIBEXEC_DIR}"
         exit 0
      ;;
   esac


   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   shopt -s extglob || internal_fail "Cant extglob"
}
###
### INIT
###
########


_init "$@" # needs params

quote="'"
args=""
for arg in "$@"
do
   arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
   args="${args} '${arg}'"
done

unset quote
unset arg

eval main "${MULLE_MONITOR_FLAGS}" "${args}"
